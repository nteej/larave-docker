---
  on:
    push:
      branches:
        - main
  jobs:
    create-deployment-artifacts:
      name: Create Deployment Artifacts
      runs-on: ubuntu-latest
      outputs:
        deployment_matrix: ${{ steps.export-deployment-matrix.outputs.deployment_matrix }}
      steps:
        - uses: actions/checkout@v2
        - name: Compile CSS and Javascript
          run: |
            npm install 
            npm run build
        - name: Configure PHP 8.1
          uses: shivammathur/setup-php@master
          with:
            php-version: 8.1
            extensions: mbstring, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer, xml
        - name: Install Composer Dependencies
          run: composer install --no-dev --no-interaction --prefer-dist
        - name: Create Deployment Artifact
          run: tar -czf ${{ github.sha }}.tar.gz --exclude=*.git --exclude=node_modules *

        - name: Store artifacts for distribution
          uses: actions/upload-artifact@v2
          with:
            name: app-build
            path: ${{ github.sha }}.tar.gz

        - name: Export deployment matrix
          id: export-deployment-matrix
          run: |
            delimiter="$(openssl rand -hex 8)"
            JSON="$(cat ./deployment-config.json)"
            echo "deployment_matrix<<${delimiter}" >> "${GITHUB_OUTPUT}"
            echo "$JSON" >> "${GITHUB_OUTPUT}"
            echo "${delimiter}" >> "${GITHUB_OUTPUT}"

    prepare-release-on-servers:
      name: "${{ matrix.server.name }}: Prepare release"
      runs-on: ubuntu-latest
      needs: create-deployment-artifacts
      strategy:
        matrix:
          server: ${{
            fromJSON(needs.create-deployment-artifacts.outputs.deployment_matrix) }}
      steps:
        - uses: actions/download-artifact@v2
          with:
            name: app-build
        - name: Upload
          uses: appleboy/scp-action@master
          with:
            host: ${{ matrix.server.ip }}
            username: ${{ matrix.server.username }}
            password: ${{ matrix.server.password }}
            port: ${{ matrix.server.port }}
            source: ${{ github.sha }}.tar.gz
            target: ${{ matrix.server.path }}artifacts
        - name: Extract archive and create dir
          uses: appleboy/ssh-action@master
          with:
            host: ${{ matrix.server.ip }}
            username: ${{ matrix.server.username }}
            password: ${{ matrix.server.password }}
            port: ${{ matrix.server.port }}
            script: |
              mkdir -p "${{ matrix.server.path }}releases/${{ github.sha }}"
              tar xzf ${{ matrix.server.path }}artifacts/${{github.sha }}.tar.gz -C "${{ matrix.server.path }}releases/${{ github.sha }}"

              rm -rf ${{ matrix.server.path }}releases/${{ github.sha }}/storage
              mkdir -p ${{ matrix.server.path }}storage/{app,public,framework,logs}
              mkdir -p ${{ matrix.server.path }}storage/framework/{cache,sessions,testing,views}
              chmod -R 0777 ${{ matrix.server.path }}storage
    run-before-hooks:
      name: "${{ matrix.server.name }}: Before hook"
      runs-on: ubuntu-latest
      needs: [ create-deployment-artifacts, prepare-release-on-servers ]
      strategy:
        matrix:
          server: ${{
            fromJSON(needs.create-deployment-artifacts.outputs.deployment_matrix) }}
      steps:
        - name: Run before hooks
          uses: appleboy/ssh-action@master
          env:
            RELEASE_PATH: ${{ matrix.server.path }}releases/${{ github.sha }}
            ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}current
            STORAGE_PATH: ${{ matrix.server.path }}storage
            BASE_PATH: ${{ matrix.server.path }}
            GITHUB_SHA: ${{ github.sha }}
          with:
            host: ${{ matrix.server.ip }}
            username: ${{ matrix.server.username }}
            password: ${{ matrix.server.password }}
            port: ${{ matrix.server.port }}
            envs: RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,GITHUB_SHA
            script: |
              ${{ matrix.server.beforeHooks }}
    
    activate-release:
      name: "${{ matrix.server.name }}: Activate Release"
      runs-on: ubuntu-latest
      needs: [ create-deployment-artifacts, prepare-release-on-servers, run-before-hooks ]
      strategy:
        matrix:
          server: ${{
            fromJSON(needs.create-deployment-artifacts.outputs.deployment_matrix) }}
      steps:
        - name: Activate Release
          uses: appleboy/ssh-action@master
          env:
            RELEASE_PATH: ${{ matrix.server.path }}releases/${{ github.sha }}
            ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}current
            STORAGE_PATH: ${{ matrix.server.path }}storage
            BASE_PATH: ${{ matrix.server.path }}
            GITHUB_SHA: ${{ github.sha }}
          with:
            host: ${{ matrix.server.ip }}
            username: ${{ matrix.server.username }}
            password: ${{ matrix.server.password }}
            port: ${{ matrix.server.port }}
            envs: RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,GITHUB_SHA
            script: |
              ${{ matrix.server.beforeHooks }}

              run-before-hooks:
                name: "${{ matrix.server.name }}: Before hook"
                runs-on: ubuntu-latest
                needs: [ create-deployment-artifacts, prepare-release-on-servers ]
                strategy:
                  matrix:
                    server: ${{
                      fromJSON(needs.create-deployment-artifacts.outputs.deployment_matrix) }}
                steps:
                  - name: Run before hooks
                    uses: appleboy/ssh-action@master
                    env:
                      RELEASE_PATH: ${{ matrix.server.path }}releases/${{ github.sha }}
                      ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}current
                      STORAGE_PATH: ${{ matrix.server.path }}storage
                      BASE_PATH: ${{ matrix.server.path }}
                      GITHUB_SHA: ${{ github.sha }}
                      LARAVEL_ENV: ${{ secrets.LARAVEL_ENV }}
                    with:
                      host: ${{ matrix.server.ip }}
                      username: ${{ matrix.server.username }}
                      password: ${{ matrix.server.password }}
                      port: ${{ matrix.server.port }}
                      envs: RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,GITHUB_SHA,LARAVEL_ENV
                      script: |
                        printf "%s" "${LARAVEL_ENV}" > "${BASE_PATH}/.env"
                        ln -s -n -f $RELEASE_PATH $ACTIVE_RELEASE_PATH
                        ln -s -f ${BASE_PATH}/.env $RELEASE_PATH
                        ln -s -f $STORAGE_PATH $RELEASE_PATH
                        service php8.1-fpm reload



  